/* 
 * File:   dl32FloatOperationsHelper.h
 * Author: Manu343726
 *
 * Created on 19 de junio de 2013, 14:21
 */

#ifndef DL32FLOATOPERATIONSHELPER_H
#define	DL32FLOATOPERATIONSHELPER_H

#include <cmath>
#include <limits>
#include <dl32TypeTraits.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief This class provides a set of useful floating-point functions.
///
/// @author	Manu343726
///////////////////////////////////////////////////////////////////////////////////////////////////////
template<typename T>
struct dl32FloatingPointHelper
{
    using floating_point_type = T; ///< Public alias to the floating-point type in use.
    static const floating_point_type epsilon = std::numeric_limits<T>::epsilon(); ///< floating-point epsilon used for comparisons.
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks if two floating-point numbers are equal.
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    static bool are_equal(const T& a , const T& b) { return std::fabs( a - b ) < epsilon; }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks if two floating-point numbers are not equal.
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    static bool are_not_equal(const T& a , const T& b) { return !are_equal( a , b ); }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks if a floating-point number is not equal to zero.
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    static bool is_zero(const T& number) { return std::fabs( number ) < epsilon; }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks if a floating-point number is not equal to zero.
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    static bool is_not_zero(const T& number) { return !is_zero( number ); }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks if a floating-point number is bigger or equal than other floating-point number.
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    static bool bigger_or_equal(const T& a , const T& b) { return a > b || are_equal( a , b ); }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks if a floating-point number is not bigger or equal than other floating-point number.
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    static bool not_bigger_or_equal(const T& a , const T& b) { return a < b; }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks if a floating-point number is less or equal than other floating-point number.
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    static bool less_or_equal(const T& a , const T& b) { return a < b || are_equal( a , b ); }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Checks if a floating-point number is not less or equal than other floating-point number.
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    static bool not_less_or_equal(const T& a , const T& b) { return a > b; }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Equality comparator
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    struct equals_comparer
    {
        bool operator ()(T f1 , T f2) const { return are_equal(f1,f2); }
    };
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Inequality comparator
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    struct not_equals_comparer
    {
        bool operator ()(T f1 , T f2) const { return are_not_equal(f1,f2); }
    };
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Equality comparator
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    struct greather_or_equal_comparer
    {
        bool operator ()(T f1 , T f2) const { return greather_or_equal_comparer(f1,f2); }
    };
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Equality comparator
    ///
    /// @author	Manu343726
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    struct less_or_equal_comparer
    {
        bool operator ()(T f1 , T f2) const { return less_or_equal(f1,f2); }
    };
};

#endif	/* DL32FLOATOPERATIONSHELPER_H */

