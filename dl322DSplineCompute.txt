void dl322DSpline::Compute()
{
	dl32EcuationsSystem *X,*Y;
	dl32SystemSolution SolX,SolY;
	dl32LinearEcuationArray ArrayX,ArrayY;
	float PreOmegaX,PreDeltaX,OmegaX,DeltaX;
	float PreOmegaY,PreDeltaY,OmegaY,DeltaY;

	//FASE 1: Rellenamos el sistema de ecuaciones para calcular las derivadas:

	ArrayX=new dl32LinearEcuation[nodecount-1];
	ArrayY=new dl32LinearEcuation[nodecount-1];

	for(int i=0;i<nodecount;++i)
	{
		ArrayX[i]=new float[nodecount-1];
		ArrayY[i]=new float[nodecount-1];

		for(int j=0;j<=nodecount;++j)
		{
			if(j<nodecount)
			{
				if(i==j)
				{
					ArrayX[i][j]=1;
					ArrayY[i][j]=1;
				}
				else if(j==i+1)
				{
					if(i==0)//Cálculo de omega-0:
					{
						OmegaX=0.5;
						OmegaY=0.5;
						PreOmegaX=0.5;
						PreOmegaY=0.5;

						ArrayX[i][j]=OmegaX;
						ArrayY[i][j]=OmegaY;
					}
					else if(i==nodecount-1)//Cálculo de omega-m:
					{
						OmegaX=1/(2-PreOmegaX);
						OmegaY=1/(2-PreOmegaY);

						ArrayX[i][j]=OmegaX;
						ArrayY[i][j]=OmegaY;
					}
					else//Cálculo de omega-i:
					{
						OmegaX=1/(4-PreOmegaX);
						OmegaY=1/(4-PreOmegaY);
						PreOmegaX=OmegaX;
						PreOmegaY=OmegaY;

						ArrayX[i][j]=OmegaX;
						ArrayY[i][j]=OmegaY;
					}
				}
				else
				{
					ArrayX[i][j]=0;
					ArrayY[i][j]=0;
				}
			}
			else
			{
				if(i==0)//Cálculo de delta-0:
				{
					DeltaX=1.5*(nodes[1].x-nodes[0].x);
					DeltaY=1.5*(nodes[1].y-nodes[0].y);
					PreDeltaX=DeltaX;
					PreDeltaY=DeltaY;

					ArrayX[0][j]=DeltaX;
					ArrayY[0][j]=DeltaY;
				}
				else if(i==nodecount-1)//Cálculo de delta-m:
				{
					DeltaX=3*(nodes[i].x-nodes[i-1].x)*PreDeltaX/(2-PreOmegaX);
					DeltaY=3*(nodes[i].y-nodes[i-1].y)*PreDeltaY/(2-PreOmegaY);
					PreDeltaX=DeltaX;
					PreDeltaY=DeltaY;

					ArrayX[i][j]=DeltaX;
					ArrayY[i][j]=DeltaY;
				}
				else//Cálculo de delta-i:
				{
					DeltaX=3*(nodes[i+1].x-nodes[i-1].x)*PreDeltaX*PreOmegaX;
					DeltaY=3*(nodes[i+1].y-nodes[i-1].y)*PreDeltaY*PreOmegaY;

					ArrayX[i][j]=DeltaX;
					ArrayY[i][j]=DeltaY;
				}
			}
		}
	}

	//FASE 2: Calculamos las derivadas (Resolvemos el sistema)
	X=new dl32EcuationsSystem(ArrayX,nodecount,nodecount);
	Y=new dl32EcuationsSystem(ArrayY,nodecount,nodecount);
	SolX=X->GetSolution();
	SolY=Y->GetSolution();

	//FASE 3: Calculamos los coeficientes de los polinomios
	intervalsX=new dl322DSplineInterval[nodecount-1];
	intervalsY=new dl322DSplineInterval[nodecount-1];

	for(int i=0;i<nodecount-1;++i)
	{
		intervalsX[i].a=nodes[i].x;
		intervalsX[i].b=SolX.Solutions[i];
		intervalsX[i].c=3*(nodes[i+1].x-nodes[i].x)-SolX.Solutions[i+1]-2*SolX.Solutions[i];
		intervalsX[i].d=2*(nodes[i].x-nodes[i+1].x)+SolX.Solutions[i]+SolX.Solutions[i+1];

		intervalsY[i].a=nodes[i].y;
		intervalsY[i].b=SolY.Solutions[i];
		intervalsY[i].c=3*(nodes[i+1].y-nodes[i].y)-SolY.Solutions[i+1]-2*SolY.Solutions[i];
		intervalsY[i].d=2*(nodes[i].y-nodes[i+1].y)+SolY.Solutions[i]+SolY.Solutions[i+1];
	}
}